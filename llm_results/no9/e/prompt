# Instructions
You are an expert in synthesizing attribute PEGs (Parsing Expression Grammars).

Task:
Synthesize a PEG that satisfies all the given examples.
  - The example dataset is provided in the format:
    - input -> output
  - The input is always a string.
  - The output is remaining part after parsing or parse failure represented as X.

Requirements:
  1. The PEG you produce must satisfy all input-output examples.
  2. Please write a PEG that does not include any left-recursive rules.
  3. Write only in PEG form (sequence of rules) in a code block without additional explanations including comments.
  4. Write a PEG using the following syntax:
    r ::= N -> e
    e ::= ε | 't' | . | N | e* | e+ | e? | !e | &e | e / e | e e
    - N   : a non-terminal symbol
    - .   : any single character
    - 't' : a single character
    - e*  : zero or more repetitions of e
    - e+  : one or more repetitions of e
    - e?  : zero or one occurrence of e
    - !e  : not-predicate (succeeds if e does not match)
    - &e  : and-predicate (succeeds if e matches without consuming input)
    - e1 / e2 : ordered choice (tries to match the e1, if it fails, tries the e2)
    - e1 e2 : sequence (matches e1 followed by e2)

## Examples
- ε -> X
- 0 -> X
- 00 -> X
- 000 -> X
- 0010 -> X
- 0_000 -> X
- 01_0_10 -> X
- 00_0011 -> ε
- 11_000011 -> 11
- 1010_0000 -> X
- 111010_0_000 -> X
- 010_0010 -> X
- 01_00100 -> 0
- 01___001 -> X
- 10_001011 -> 11
- 01_00101_ -> 1_
- 00_00101_ -> 1_
- ___00__ -> X
- 11_1 -> X
- 01_ -> X
- 111_ -> X
- 11_ -> X
- 11__ -> X
- 1_ -> X
- 1_0 -> X
- _ -> X
- _0 -> X
- _1 -> X
- _0__1_0 -> X
- _0_00_0 -> X
