# Instructions
You are an expert in synthesizing attribute PEGs (Parsing Expression Grammars).

Task:
Synthesize a PEG that satisfies all the given examples.
  - The example dataset is provided in the format:
    - input -> output
  - The input is always a string.
  - The output is remaining part after parsing or parse failure represented as X.

Requirements:
  1. The PEG you produce must satisfy all input-output examples.
  2. Please write a PEG that does not include any left-recursive rules.
  3. Write only in PEG form (sequence of rules) in a code block without additional explanations including comments.
  4. Write a PEG using the following syntax:
    r ::= N -> e
    e ::= ε | 't' | . | N | e* | e+ | e? | !e | &e | e / e | e e
    - N   : a non-terminal symbol
    - .   : any single character
    - 't' : a single character
    - e*  : zero or more repetitions of e
    - e+  : one or more repetitions of e
    - e?  : zero or one occurrence of e
    - !e  : not-predicate (succeeds if e does not match)
    - &e  : and-predicate (succeeds if e matches without consuming input)
    - e1 / e2 : ordered choice (tries to match the e1, if it fails, tries the e2)
    - e1 e2 : sequence (matches e1 followed by e2)

## Examples
- ε -> ε
- 0 -> ε
- 00 -> 0
- 0001 -> 001
- 001 -> 01
- 01 -> ε
- 010 -> ε
- 0100 -> 0
- 0101 -> ε
- 010100 -> 0
- 010101 -> ε
- 011 -> 1
- 0110 -> 10
- 0111 -> 11
- 1 -> ε
- 10 -> ε
- 100 -> 0
- 1000 -> 00
- 1001 -> 01
- 101 -> ε
- 1010 -> ε
- 1011 -> 1
- 11 -> 1
- 110 -> 10
- 111 -> 11
